<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="me.dio.credit.application.system.controller.CustomerResourceTest" tests="9" skipped="0" failures="0" errors="0" timestamp="2023-11-19T19:58:55" hostname="TIAGO" time="3.278">
  <properties/>
  <testcase name="should not update a customer with invalid id and return 400 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="1.837"/>
  <testcase name="should create a customer and return 201 status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.658"/>
  <testcase name="should not find customer with invalid id and return 400 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.046"/>
  <testcase name="should delete customer by id and return 204 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.075"/>
  <testcase name="should not save a customer with firstName empty and return 400 status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.124"/>
  <testcase name="should update a customer and return 200 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.135"/>
  <testcase name="should not delete customer by id and return 400 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.074"/>
  <testcase name="should find customer by id and return 200 as status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.093"/>
  <testcase name="should not save a customer with same CPF and return 409 status()" classname="me.dio.credit.application.system.controller.CustomerResourceTest" time="0.183"/>
  <system-out><![CDATA[2023-11-19T16:58:50.892-03:00  INFO 11848 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [me.dio.credit.application.system.controller.CustomerResourceTest]: CustomerResourceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-11-19T16:58:50.938-03:00  INFO 11848 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration me.dio.credit.application.system.CreditApplicationSystemApplication for test class me.dio.credit.application.system.controller.CustomerResourceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.0.4)

2023-11-19T16:58:51.081-03:00  INFO 11848 --- [    Test worker] m.d.c.a.s.c.CustomerResourceTest         : Starting CustomerResourceTest using Java 17.0.9 with PID 11848 (started by tiago in C:\Users\tiago\Documentos\Programação\Dio\credit-application-system)
2023-11-19T16:58:51.082-03:00  INFO 11848 --- [    Test worker] m.d.c.a.s.c.CustomerResourceTest         : The following 1 profile is active: "test"
2023-11-19T16:58:51.843-03:00  INFO 11848 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-11-19T16:58:51.886-03:00  INFO 11848 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 41 ms. Found 2 JPA repository interfaces.
2023-11-19T16:58:52.208-03:00  INFO 11848 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2023-11-19T16:58:52.215-03:00  INFO 11848 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-2 - Added connection conn10: url=jdbc:h2:mem:db user=SA
2023-11-19T16:58:52.216-03:00  INFO 11848 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2023-11-19T16:58:52.219-03:00  INFO 11848 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-11-19T16:58:52.249-03:00  INFO 11848 --- [    Test worker] SQL dialect                              : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: 
    
    drop table if exists credit cascade 
Hibernate: 
    
    drop table if exists customer cascade 
Hibernate: 
    
    create table credit (
       id bigint generated by default as identity,
        credit_code uuid not null,
        credit_value numeric(38,2) not null,
        day_first_installment date not null,
        number_of_installments integer not null,
        status smallint,
        customer_id bigint,
        primary key (id)
    )
Hibernate: 
    
    create table customer (
       id bigint generated by default as identity,
        street varchar(255) not null,
        zip_code varchar(255) not null,
        cpf varchar(255) not null,
        email varchar(255) not null,
        first_name varchar(255) not null,
        income numeric(38,2) not null,
        last_name varchar(255) not null,
        password varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    alter table if exists credit 
       add constraint UK_fs9sb9vxu86umfd06ybk7l6tv unique (credit_code)
Hibernate: 
    
    alter table if exists customer 
       add constraint UK_cwtgtb16nebxu54elskdjei66 unique (cpf)
Hibernate: 
    
    alter table if exists customer 
       add constraint UK_dwk6cx0afu8bs9o4t536v1j5v unique (email)
Hibernate: 
    
    alter table if exists credit 
       add constraint FKosxy6eoxva5hh9tschjwx1nf0 
       foreign key (customer_id) 
       references customer
2023-11-19T16:58:52.499-03:00  INFO 11848 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-11-19T16:58:52.500-03:00  INFO 11848 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-11-19T16:58:53.269-03:00  WARN 11848 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-11-19T16:58:55.853-03:00  INFO 11848 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2023-11-19T16:58:55.916-03:00  INFO 11848 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-11-19T16:58:55.917-03:00  INFO 11848 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-11-19T16:58:55.926-03:00  INFO 11848 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 4 ms
2023-11-19T16:58:55.968-03:00  INFO 11848 --- [    Test worker] m.d.c.a.s.c.CustomerResourceTest         : Started CustomerResourceTest in 5.017 seconds (process running for 40.822)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /api/customers
       Parameters = {customerId=[1000]}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"113"]
             Body = {"firstName":"CamiUpdate","lastName":"CavalcanteUpdate","income":5000.0,"zipCode":"45656","street":"Rua Updated"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#upadateCustomer(long, CustomerUpdateDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = me.dio.credit.application.system.exception.BusinessException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request! Consult the documentation","timestamp":"2023-11-19T16:58:57.4151092","status":400,"exception":"class me.dio.credit.application.system.exception.BusinessException","details":{"null":"Id 1000 not found"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"172"]
             Body = {"firstName":"Cami","lastName":"Cavalcante","cpf":"28475934625","income":1000.0,"email":"camila@email.com","password":"1234","zipCode":"000000","street":"Rua da Cami, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#saveCustomer(CustomerDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"firstName":"Cami","lastName":"Cavalcante","cpf":"28475934625","income":1000.0,"email":"camila@email.com","zipCode":"000000","street":"Rua da Cami, 123","id":1}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installments,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/customers/2
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#findById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = me.dio.credit.application.system.exception.BusinessException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request! Consult the documentation","timestamp":"2023-11-19T16:58:58.5181094","status":400,"exception":"class me.dio.credit.application.system.exception.BusinessException","details":{"null":"Id 2 not found"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installments,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/customers/2
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#deleteCustomer(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"168"]
             Body = {"firstName":"","lastName":"Cavalcante","cpf":"28475934625","income":1000.0,"email":"camila@email.com","password":"1234","zipCode":"000000","street":"Rua da Cami, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#saveCustomer(CustomerDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request! Consult the documentation","timestamp":"2023-11-19T16:58:58.720112","status":400,"exception":"class org.springframework.web.bind.MethodArgumentNotValidException","details":{"firstName":"Invalid input"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?
Hibernate: 
    update
        customer 
    set
        street=?,
        zip_code=?,
        cpf=?,
        email=?,
        first_name=?,
        income=?,
        last_name=?,
        password=? 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /api/customers
       Parameters = {customerId=[3]}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"113"]
             Body = {"firstName":"CamiUpdate","lastName":"CavalcanteUpdate","income":5000.0,"zipCode":"45656","street":"Rua Updated"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#upadateCustomer(long, CustomerUpdateDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"firstName":"CamiUpdate","lastName":"CavalcanteUpdate","cpf":"28475934625","income":5000.0,"email":"camila@email.com","zipCode":"45656","street":"Rua Updated","id":3}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installments,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/customers/1000
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#deleteCustomer(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = me.dio.credit.application.system.exception.BusinessException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request! Consult the documentation","timestamp":"2023-11-19T16:58:58.967109","status":400,"exception":"class me.dio.credit.application.system.exception.BusinessException","details":{"null":"Id 1000 not found"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/customers/4
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#findById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"firstName":"Cami","lastName":"Cavalcante","cpf":"28475934625","income":1000.00,"email":"camila@email.com","zipCode":"000000","street":"Rua da Cami, 123","id":4}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installments,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        customer
        (id, street, zip_code, cpf, email, first_name, income, last_name, password) 
    values
        (default, ?, ?, ?, ?, ?, ?, ?, ?)
2023-11-19T16:58:59.134-03:00  WARN 11848 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 23505, SQLState: 23505
2023-11-19T16:58:59.134-03:00 ERROR 11848 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : Unique index or primary key violation: "PUBLIC.UK_CWTGTB16NEBXU54ELSKDJEI66_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )"; SQL statement:
insert into customer (id, street, zip_code, cpf, email, first_name, income, last_name, password) values (default, ?, ?, ?, ?, ?, ?, ?, ?) [23505-214]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"172"]
             Body = {"firstName":"Cami","lastName":"Cavalcante","cpf":"28475934625","income":1000.0,"email":"camila@email.com","password":"1234","zipCode":"000000","street":"Rua da Cami, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controller.CustomerResource
           Method = me.dio.credit.application.system.controller.CustomerResource#saveCustomer(CustomerDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.dao.DataIntegrityViolationException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Conflict! Consult the documentation","timestamp":"2023-11-19T16:58:59.1831046","status":409,"exception":"class org.springframework.dao.DataIntegrityViolationException","details":{"org.hibernate.exception.ConstraintViolationException: could not execute statement":"could not execute statement; SQL [n/a]; constraint [\"PUBLIC.UK_CWTGTB16NEBXU54ELSKDJEI66_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )\"; SQL statement:\ninsert into customer (id, street, zip_code, cpf, email, first_name, income, last_name, password) values (default, ?, ?, ?, ?, ?, ?, ?, ?) [23505-214]]"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installments,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
